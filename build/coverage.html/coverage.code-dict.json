{"/home/travis/build/npmtest/node-npmtest-google-cdn/test.js":"/* istanbul instrument in package npmtest_google_cdn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-cdn/lib.npmtest_google_cdn.js":"/* istanbul instrument in package npmtest_google_cdn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_cdn = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_cdn = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-cdn/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-cdn && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_cdn */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_cdn\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_cdn.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_google_cdn.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_cdn.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_google_cdn.__dirname +\n                    '/lib.npmtest_google_cdn.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-cdn/node_modules/google-cdn/googlecdn.js":"'use strict';\n\nvar async = require('async');\nvar semver = require('semver');\nvar debug = require('debug')('google-cdn');\nvar requote = require('regexp-quote');\nvar escape = require('escape-regexp');\n\nvar data = {\n  google: require('google-cdn-data'),\n  cdnjs: require('cdnjs-cdn-data')\n};\n\nvar bowerUtil = require('./util/bower');\n\nfunction normalizeBowerName(bowerJson, name) {\n  if ((bowerJson.dependencies && bowerJson.dependencies[name]) ||\n      (bowerJson.devDependencies && bowerJson.devDependencies[name])) {\n    return name;\n  } else {\n    return name.replace(/\\.js$/,'');\n  }\n}\n\nfunction getDepVersionStr(deps, name, cleanup) {\n  if (deps) {\n    var versionStr = deps[name];\n    if (versionStr && cleanup) {\n      delete deps[name];\n    }\n    return versionStr;\n  }\n}\n\nfunction getVersionStr(bowerJson, name, cleanup) {\n  var versionStr;\n  var bowerName = normalizeBowerName(bowerJson, name);\n\n  versionStr = getDepVersionStr(bowerJson.dependencies, bowerName, cleanup);\n\n  if (!versionStr) {\n    versionStr = getDepVersionStr(bowerJson.devDependencies, bowerName, cleanup);\n  }\n\n  return versionStr;\n}\n\nfunction satisfyDependency(bowerJson, name) {\n  getVersionStr(bowerJson, name, true);\n}\n\n\nfunction isFunction(fn) {\n  return typeof(fn) === 'function';\n}\n\nfunction getCDNUrl(item, type, version) {\n  var url = item[type] || item.url;\n  if (url) {\n    return (isFunction(url)) ? url(version) : url;\n  }\n}\n\nfunction getTypesArray(types) {\n  if (Array.isArray(types) || typeof(types) === 'string') {\n    return [].concat(types);\n  } else if (types) {\n    throw new Error('Types must be an array or a string');\n  }\n}\n\n\nmodule.exports = function cdnify(content, bowerJsonOriginal, options, masterCallback) {\n\n  if (!bowerJsonOriginal) {\n    throw new Error('Required argument `bowerJson` is missing.');\n  }\n  //clone bowerJson so that it can be modified\n  var bowerJson = JSON.parse(JSON.stringify(bowerJsonOriginal));\n\n  if (isFunction(options)) {\n    masterCallback = options;\n    options = {};\n  }\n\n  options = options || {};\n  options.componentsPath = options.componentsPath || 'bower_components';\n\n  var cdn = options.cdn || 'google';\n  var cdnData = {};\n  if (Array.isArray(cdn)) {\n    cdn.forEach(function(host) {\n      cdnData[host] = data[host];\n    });\n  } else if (typeof(cdn) === 'object') {\n    cdnData.custom = cdn;\n  } else {\n    cdnData[cdn] = data[cdn];\n  }\n\n  var supportedTypes = {};\n  supportedTypes.types = getTypesArray(options.types) || ['js', 'css'];\n  supportedTypes.typesRegex = {};\n  supportedTypes.types.forEach(function (type) {\n    supportedTypes.typesRegex[type] = new RegExp('\\\\.' + escape(type) + '$', 'i');\n  });\n\n  var cdnHostList = Object.keys(cdnData);\n\n  if (!cdnHostList.length) {\n    return masterCallback(new Error('CDN ' + cdn + ' is not supported.'));\n  }\n  for (var i = 0; i < cdnHostList.length; i++) {\n    var badCdn = cdnHostList[i];\n    if (!cdnData[badCdn]) {\n      return masterCallback(new Error('CDN ' + badCdn + ' is not supported.'));\n    }\n  }\n\n  function generateReplacement(bowerPath, url) {\n    // Replace leading slashes if present.\n    var from = bowerUtil.joinComponent(options.componentsPath, bowerPath);\n    var fromRe = '/?' + requote(from);\n    var fromRegex = new RegExp(fromRe);\n    return {\n      from: from,\n      fromRegex: fromRegex,\n      to: url\n    };\n  }\n\n  function buildReplacement(cdnHost) {\n    return function(name, callback) {\n      var item = cdnData[cdnHost][name];\n      var versionStr = getVersionStr(bowerJson, name);\n\n      if (!versionStr) {\n        return callback();\n      }\n      name = normalizeBowerName(bowerJson, name);\n\n      var version = semver.maxSatisfying(item.versions, versionStr);\n      if (version) {\n        satisfyDependency(bowerJson, name);\n        debug('Choosing version %s for dependency %s', version, name);\n\n        if (item.all) {\n          var url = (isFunction(item.url)) ? item.url(version) : item.url;\n          callback(null, generateReplacement(name, url));\n        } else {\n          bowerUtil.resolveMainPath(supportedTypes, name, versionStr, function (err, main) {\n            if (err) {\n              return callback(err);\n            } else {\n              var replacements = [];\n              for (var type in main) {\n                var url = getCDNUrl(item, type, version);\n                if (url) {\n                  replacements.push(generateReplacement(main[type], url));\n                }\n              }\n              callback(null, replacements);\n\n            }\n          });\n        }\n      } else {\n        debug('Could not find satisfying version for %s %s', name, versionStr);\n        callback();\n      }\n    };\n  }\n\n  var replacementInfo = [];\n\n  function buildReplacementForHost(cdnHost, callback) {\n    async.map(Object.keys(cdnData[cdnHost]), buildReplacement(cdnHost), function (err, replacements) {\n      if (err) {\n        return callback(err);\n      }\n\n      function replaceContent(fileReplacement) {\n        if (fileReplacement) {\n          content = content.replace(fileReplacement.fromRegex, fileReplacement.to);\n          debug('Replaced %s with %s', fileReplacement.fromRegex, fileReplacement.to);\n          replacementInfo.push(fileReplacement);\n        }\n      }\n\n      replacements.forEach(function (replacement) {\n        if (replacement) {\n          if (Array.isArray(replacement)) {\n            replacement.forEach(replaceContent);\n          } else {\n            replaceContent(replacement);\n          }\n        }\n      });\n      callback();\n    });\n  }\n\n  async.eachSeries(cdnHostList, buildReplacementForHost, function(err) {\n    if (err) {\n      return masterCallback(err);\n    }\n\n    masterCallback(null, content, replacementInfo);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-google-cdn/node_modules/google-cdn-data/index.js":"'use strict';\n\nvar data = module.exports = {\n  jquery: {\n    versions: ['3.1.1', '3.1.0', '3.0.0', '2.2.4', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.4', '2.1.3', '2.1.2', '2.1.1', '2.1.0', '2.0.3', '2.0.2', '2.0.1', '2.0.0', '1.11.1', '1.11.0', '1.10.2', '1.10.1', '1.10.0', '1.9.1', '1.9.0', '1.8.3', '1.8.2', '1.8.1', '1.8.0', '1.7.2', '1.7.1', '1.7.0', '1.6.4', '1.6.3', '1.6.2', '1.6.1', '1.6.0', '1.5.2', '1.5.1', '1.5.0', '1.4.4', '1.4.3', '1.4.2', '1.4.1', '1.4.0', '1.3.2', '1.3.1', '1.3.0', '1.2.6', '1.2.3'],\n    url: function (version) {\n      return '//ajax.googleapis.com/ajax/libs/jquery/' + version + '/jquery.min.js';\n    }\n  },\n  'jquery-ui': {\n    versions: ['1.11.4', '1.11.3', '1.11.2', '1.11.1', '1.11.0', '1.10.4', '1.10.3', '1.10.2', '1.10.1', '1.10.0', '1.9.2', '1.9.1', '1.9.0', '1.8.24', '1.8.23', '1.8.22', '1.8.21', '1.8.20', '1.8.19', '1.8.18', '1.8.17', '1.8.16', '1.8.15', '1.8.14', '1.8.13', '1.8.12', '1.8.11', '1.8.10', '1.8.9', '1.8.8', '1.8.7', '1.8.6', '1.8.5', '1.8.4', '1.8.2', '1.8.1', '1.8.0', '1.7.3', '1.7.2', '1.7.1', '1.7.0', '1.6.0', '1.5.3', '1.5.2'],\n    url: function (version) {\n      return '//ajax.googleapis.com/ajax/libs/jqueryui/' + version + '/jquery-ui.min.js';\n    }\n  },\n  dojo: {\n    versions: ['1.10.4', '1.10.3', '1.10.2', '1.10.1', '1.10.0', '1.9.3', '1.9.2', '1.9.1', '1.9.0', '1.8.5', '1.8.4', '1.8.3', '1.8.2', '1.8.1', '1.8.0', '1.7.5', '1.7.4', '1.7.3', '1.7.2', '1.7.1', '1.7.0', '1.6.1', '1.6.0', '1.5.2', '1.5.1', '1.5.0', '1.4.4', '1.4.3', '1.4.1', '1.4.0', '1.3.2', '1.3.1', '1.3.0', '1.2.3', '1.2.0', '1.1.1'],\n    url: function (version) {\n      return '//ajax.googleapis.com/ajax/libs/dojo/' + version + '/dojo/dojo.js';\n    }\n  },\n  swfobject: {\n    versions: ['2.2', '2.1'],\n    url: function (version) {\n      return '//ajax.googleapis.com/ajax/libs/swfobject/' + version + '/swfobject.js';\n    }\n  },\n  'angular-material': {\n    versions: ['0.10.0', '0.9.4', '0.9.0', '0.8.3', '0.8.2', '0.8.1', '0.8.0', '0.7.1', '0.7.0', '0.6.1'],\n    url: function (version) {\n      return '//ajax.googleapis.com/ajax/libs/angular_material/' + version + '/angular-material.min.js';\n    }\n  }\n};\n\n// AngularJS\n\nvar angularFiles = [\n  'angular',\n  'angular-animate',\n  'angular-aria',\n  'angular-cookies',\n  'angular-loader',\n  'angular-messages',\n  'angular-resource',\n  'angular-route',\n  'angular-sanitize',\n  'angular-touch'\n];\n\nangularFiles.forEach(function (item) {\n  var stableVersions = ['1.6.1', '1.6.0', '1.5.10', '1.5.9', '1.5.8', '1.5.7', '1.5.6', '1.5.5', '1.5.4', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.9', '1.4.8', '1.4.7', '1.4.6', '1.4.5', '1.4.4', '1.4.3', '1.4.2', '1.4.1', '1.4.0', '1.3.17','1.3.16','1.3.15', '1.3.14', '1.3.13', '1.3.12', '1.3.11', '1.3.10', '1.3.9', '1.3.8', '1.3.7', '1.3.6', '1.3.5', '1.3.4', '1.3.3', '1.3.2', '1.3.1', '1.3.0', '1.2.28', '1.2.27', '1.2.26', '1.2.25', '1.2.24', '1.2.23', '1.2.22', '1.2.21', '1.2.20', '1.2.19', '1.2.18', '1.2.17', '1.2.16', '1.2.15', '1.2.14', '1.2.13', '1.2.12', '1.2.11', '1.2.10', '1.2.9', '1.2.8', '1.2.7', '1.2.6', '1.2.5', '1.2.4', '1.2.3', '1.2.2', '1.2.1', '1.2.0', '1.0.8', '1.0.7', '1.0.6', '1.0.5', '1.0.4', '1.0.3', '1.0.2', '1.0.1'];\n  var unstableVersions = ['1.6.0-rc.2', '1.6.0-rc.1', '1.6.0-rc.0', '1.5.0-rc.2', '1.5.0-rc.1', '1.5.0-rc.0', '1.5.0-beta.2', '1.5.0-beta.1', '1.5.0-beta.0', '1.4.0-rc.2', '1.4.0-rc.1', '1.4.0-rc.0', '1.4.0-beta.6', '1.4.0-beta.5', '1.4.0-beta.4', '1.4.0-beta.3', '1.4.0-beta.2', '1.4.0-beta.1', '1.4.0-beta.0', '1.3.0-rc.5', '1.3.0-rc.4', '1.3.0-rc.3', '1.3.0-rc.2', '1.3.0-rc.1', '1.3.0-rc.0', '1.3.0-beta.19', '1.3.0-beta.18', '1.3.0-beta.17', '1.3.0-beta.16', '1.3.0-beta.15', '1.3.0-beta.14', '1.3.0-beta.13', '1.3.0-beta.12', '1.3.0-beta.11', '1.3.0-beta.10', '1.3.0-beta.9', '1.3.0-beta.8', '1.3.0-beta.7', '1.3.0-beta.6', '1.3.0-beta.5', '1.3.0-beta.4', '1.3.0-beta.3', '1.3.0-beta.2', '1.3.0-beta.1'];\n  data[item] = {\n    versions: [].concat(stableVersions).concat(unstableVersions),\n    url: function (version) {\n      return '//ajax.googleapis.com/ajax/libs/angularjs/' + version + '/' + item + '.min.js';\n    }\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-google-cdn/node_modules/google-cdn/util/bower.js":"'use strict';\n\nvar bower = require('bower');\nvar path = require('path');\nvar debug = require('debug')('google-cdn');\nvar bowerUtil = module.exports;\n\nbowerUtil.joinComponent = function joinComponent(directory, component) {\n  var dirBits = directory.split(path.sep);\n  // Always join the path with a forward slash, because it's used to replace the\n  // path in HTML.\n  return path.join(dirBits.join('/'), component).replace(/\\\\/g, '/');\n};\n\nfunction extractFile(supportedTypes, files, main) {\n  supportedTypes.types.forEach(function (type) {\n    if (supportedTypes.typesRegex[type].test(main)) {\n      files[type] = main;\n    }\n  });\n}\n\nfunction findMainFiles(supportedTypes, component, main) {\n  var mainFiles = {};\n  if (Array.isArray(main)) {\n    main.forEach(function (name) {\n        if (name) {\n          extractFile(supportedTypes, mainFiles, name);\n        }\n      }\n    );\n  } else if (typeof(main) === 'string') {\n    extractFile(supportedTypes, mainFiles, main);\n  } else {\n    debug('Cannot determine main property');\n    supportedTypes.types.forEach(function (type) {\n      mainFiles[type] = component.replace(new RegExp(type + '$', 'i'), '') + '.' + type;\n    });\n  }\n  return mainFiles;\n}\n\n\nbowerUtil.resolveMainPath = function resolveMain(supportedTypes, component, version, callback) {\n  debug('resolving main property for component %s#%s', component, version);\n  bower.commands.info(component + '#' + version, 'main').on('end', function (main) {\n    var mainFiles = findMainFiles(supportedTypes, component, main);\n    for (var type in mainFiles) {\n      mainFiles[type] = bowerUtil.joinComponent(component, mainFiles[type]);\n    }\n    callback(null, mainFiles);\n  }).on('error', callback);\n};\n"}